package main

import (
	"context"
	"fmt"
	"info/infos"
	"log"
	"net"

	"google.golang.org/grpc"
)

type InfoServer struct {
	infos.UnimplementedInfosServer // ensure backwards compability
}

// Implements the LogInfo method generated by the proto file
func (i *InfoServer) LogInfo(ctx context.Context, req *infos.InfoRequest) (*infos.InfoResponse, error) {
	input := req.GetInfo()
	
	log.Printf("%s - %s", input.Name, input.Data)

	response := &infos.InfoResponse{Result: fmt.Sprintf("%s processed log via gRPC", input.Name)}
	return response, nil
}

func grpcListen() {
	listen, err := net.Listen("tcp", fmt.Sprintf("0.0.0.0:%s", grpcPort))
	if err != nil {
		log.Fatalf("fail listen gRPC: %s", err.Error())
	}

	srv := grpc.NewServer()
	
	infos.RegisterInfosServer(srv, &InfoServer{})

	log.Printf("gRPC Server started on port %s", grpcPort)

	if err := srv.Serve(listen); err != nil {
		log.Fatalf("fail listen gRPC: %s", err.Error())
	}

}